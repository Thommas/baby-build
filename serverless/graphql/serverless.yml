service: pathofchild-graphql

plugins:
  - serverless-plugin-typescript
  - serverless-dynamodb-local
  - serverless-offline

custom:
  stage: ${opt:stage, self:provider.stage}
  buildTable: ${self:service}-${self:custom.stage}-build
  childTable: ${self:service}-${self:custom.stage}-child
  gamificationTable: ${self:service}-${self:custom.stage}-gamification
  questTable: ${self:service}-${self:custom.stage}-quest
  userTable: ${self:service}-${self:custom.stage}-user
  whitelistItemTable: ${self:service}-${self:custom.stage}-whitelist-item
  secrets: ${file(secrets.yml):${self:custom.stage}}
  serverless-offline:
    port: 4001
  dynamodb:
    start:
      port: 8000
      inMemory: true
      migrate: true
      seed: true
    seed:
      test:
        sources:
          - table: ${self:custom.buildTable}
            sources: [./fixtures/build.json]
          - table: ${self:custom.childTable}
            sources: [./fixtures/child.json]
          - table: ${self:custom.gamificationTable}
            sources: [./fixtures/gamification.json]
          - table: ${self:custom.questTable}
            sources: [./fixtures/quest.json]
          - table: ${self:custom.userTable}
            sources: [./fixtures/user.json]
          - table: ${self:custom.whitelistItemTable}
            sources: [./fixtures/whitelist-item.json]

package:
  exclude:
    - secrets.yml

provider:
  name: aws
  runtime: nodejs6.10
  stage: dev
  iamRoleStatements:
    - Effect: Allow
      Action:
        - dynamodb:DescribeTable
        - dynamodb:Query
        - dynamodb:Scan
        - dynamodb:GetItem
        - dynamodb:PutItem
        - dynamodb:UpdateItem
        - dynamodb:DeleteItem
      Resource: arn:aws:dynamodb:eu-west-1:*:*
  environment:
    AUTH0_CLIENT_ID: ${self:custom.secrets.AUTH0_CLIENT_ID}
    AUTH0_JWKS_URI: ${self:custom.secrets.AUTH0_JWKS_URI}
    AUTH0_JWKS_KID: ${self:custom.secrets.AUTH0_JWKS_KID}
    BUILD_TABLE: ${self:custom.buildTable}
    CHILD_TABLE: ${self:custom.childTable}
    GAMIFICATION_TABLE: ${self:custom.gamificationTable}
    QUEST_TABLE: ${self:custom.questTable}
    USER_TABLE: ${self:custom.userTable}
    WHITELIST_ITEM_TABLE: ${self:custom.whitelistItemTable}

functions:
  customAuthorizer:
    handler: lib/handler.auth
  graphql:
    handler: lib/handler.graphql
    events:
      - http:
          path: graphql
          method: post
          cors: true
#          authorizer: customAuthorizer

resources:
  Resources:
    buildTable:
      Type: AWS::DynamoDB::Table
      DeletionPolicy: Retain
      Properties:
        AttributeDefinitions:
          - AttributeName: id
            AttributeType: S
        KeySchema:
          - AttributeName: id
            KeyType: HASH
        ProvisionedThroughput:
          ReadCapacityUnits: 1
          WriteCapacityUnits: 1
        TableName: ${self:custom.buildTable}
        StreamSpecification:
          StreamViewType: NEW_AND_OLD_IMAGES
    childTable:
      Type: AWS::DynamoDB::Table
      DeletionPolicy: Retain
      Properties:
        AttributeDefinitions:
          - AttributeName: id
            AttributeType: S
        KeySchema:
          - AttributeName: id
            KeyType: HASH
        ProvisionedThroughput:
          ReadCapacityUnits: 1
          WriteCapacityUnits: 1
        TableName: ${self:custom.childTable}
        StreamSpecification:
          StreamViewType: NEW_AND_OLD_IMAGES
    gamificationTable:
      Type: AWS::DynamoDB::Table
      DeletionPolicy: Retain
      Properties:
        AttributeDefinitions:
          - AttributeName: id
            AttributeType: S
        KeySchema:
          - AttributeName: id
            KeyType: HASH
        ProvisionedThroughput:
          ReadCapacityUnits: 1
          WriteCapacityUnits: 1
        TableName: ${self:custom.gamificationTable}
        StreamSpecification:
          StreamViewType: NEW_AND_OLD_IMAGES
    questTable:
      Type: AWS::DynamoDB::Table
      DeletionPolicy: Retain
      Properties:
        AttributeDefinitions:
          - AttributeName: id
            AttributeType: S
        KeySchema:
          - AttributeName: id
            KeyType: HASH
        ProvisionedThroughput:
          ReadCapacityUnits: 1
          WriteCapacityUnits: 1
        TableName: ${self:custom.questTable}
        StreamSpecification:
          StreamViewType: NEW_AND_OLD_IMAGES
    userTable:
      Type: AWS::DynamoDB::Table
      DeletionPolicy: Retain
      Properties:
        AttributeDefinitions:
          - AttributeName: id
            AttributeType: S
        KeySchema:
          - AttributeName: id
            KeyType: HASH
        ProvisionedThroughput:
          ReadCapacityUnits: 1
          WriteCapacityUnits: 1
        TableName: ${self:custom.userTable}
        StreamSpecification:
          StreamViewType: NEW_AND_OLD_IMAGES
    whitelistItemTable:
      Type: AWS::DynamoDB::Table
      DeletionPolicy: Retain
      Properties:
        AttributeDefinitions:
          - AttributeName: id
            AttributeType: S
        KeySchema:
          - AttributeName: id
            KeyType: HASH
        ProvisionedThroughput:
          ReadCapacityUnits: 1
          WriteCapacityUnits: 1
        TableName: ${self:custom.whitelistItemTable}
        StreamSpecification:
          StreamViewType: NEW_AND_OLD_IMAGES
